// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tstream.proto

package tstream

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Tstream service

func NewTstreamEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Tstream service

type TstreamService interface {
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Tstream_StreamService, error)
}

type tstreamService struct {
	c    client.Client
	name string
}

func NewTstreamService(name string, c client.Client) TstreamService {
	return &tstreamService{
		c:    c,
		name: name,
	}
}

func (c *tstreamService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Tstream_StreamService, error) {
	req := c.c.NewRequest(c.name, "Tstream.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &tstreamServiceStream{stream}, nil
}

type Tstream_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type tstreamServiceStream struct {
	stream client.Stream
}

func (x *tstreamServiceStream) Close() error {
	return x.stream.Close()
}

func (x *tstreamServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *tstreamServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tstreamServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tstreamServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Tstream service

type TstreamHandler interface {
	Stream(context.Context, *StreamingRequest, Tstream_StreamStream) error
}

func RegisterTstreamHandler(s server.Server, hdlr TstreamHandler, opts ...server.HandlerOption) error {
	type tstream interface {
		Stream(ctx context.Context, stream server.Stream) error
	}
	type Tstream struct {
		tstream
	}
	h := &tstreamHandler{hdlr}
	return s.Handle(s.NewHandler(&Tstream{h}, opts...))
}

type tstreamHandler struct {
	TstreamHandler
}

func (h *tstreamHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TstreamHandler.Stream(ctx, m, &tstreamStreamStream{stream})
}

type Tstream_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type tstreamStreamStream struct {
	stream server.Stream
}

func (x *tstreamStreamStream) Close() error {
	return x.stream.Close()
}

func (x *tstreamStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *tstreamStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tstreamStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tstreamStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}
